@charset "UTF-8";

@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "sass:string";
@use "sass:meta";

////
/// Cross-engine logging engine
/// @access private
////

///
/// Log a message either with `@error` if supported
/// else with `@warn`, using `feature-exists("at-error")`
/// to detect support.
///
/// @param {String} $message - Message to log
///
@function im-log($message) {
	@if meta.feature-exists("at-error") {
		@error $message;
	} @else {
		@warn $message;

		$_: noop();
	}

	@return $message;
}

/// Function with no `@return` called next to `@warn` in Sass 3.3
/// to trigger a compiling error and stop the process.
///
@function noop() {
}

///
/// Determines whether a list of conditions is intercepted by the static breakpoint.
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint
///
@function im-intercepts-static-breakpoint($conditions...) {
	$no-media-breakpoint-value: map.get($breakpoints, $im-no-media-breakpoint);

	@if not $no-media-breakpoint-value {
		@if im-log("`#{$im-no-media-breakpoint}` is not a valid breakpoint.") {
		}
	}

	@each $condition in $conditions {
		@if not map.has-key($media-expressions, $condition) {
			$operator: get-expression-operator($condition);
			$prefix: get-expression-prefix($operator);
			$value: get-expression-value($condition, $operator);

			@if ($prefix == "max" and $value <= $no-media-breakpoint-value) or
				($prefix == "min" and $value > $no-media-breakpoint-value) {
				@return false;
			}
		} @else if not list.index($im-no-media-expressions, $condition) {
			@return false;
		}
	}

	@return true;
}

/// Parsing engine
/// @access private
////

///
/// Get operator of an expression
///
/// @param {String} $expression - Expression to extract operator from
///
/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`
///
@function get-expression-operator($expression) {
	@each $operator in (">=", ">", "<=", "<", "≥", "≤") {
		@if string.index($expression, $operator) {
			@return $operator;
		}
	}

	// It is not possible to include a mixin inside a function, so we have to
	// rely on the `im-log(..)` function rather than the `log(..)` mixin. Because
	// functions cannot be called anywhere in Sass, we need to hack the call in
	// a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
	// Sass 3.3, change this line in `@if im-log(..) {}` instead.
	$_: im-log("No operator found in `#{$expression}`.");
}

///
/// Get dimension of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract dimension from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {String} - `width` or `height` (or potentially anything else)
///
@function get-expression-dimension($expression, $operator) {
	$operator-index: string.index($expression, $operator);
	$parsed-dimension: string.slice($expression, 0, $operator-index - 1);
	$parsed-dimension: str-trim($parsed-dimension);
	$dimension: "width";

	@if string.length($parsed-dimension) > 0 {
		$dimension: $parsed-dimension;
	}

	@return $dimension;
}

///
/// Get dimension prefix based on an operator
///
/// @param {String} $operator - Operator
///
/// @return {String} - `min` or `max`
///
@function get-expression-prefix($operator) {
	@return if(list.index(("<", "<=", "≤"), $operator), "max", "min");
}

///
/// Get value of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract value from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {Number} - A numeric value
///
@function get-expression-value($expression, $operator) {
	$operator-index: string.index($expression, $operator);
	$value: string.slice($expression, $operator-index + string.length($operator));
	$trimmedValue: str-trim($value);

	@if map.has-key($breakpoints, $trimmedValue) {
		$value: map.get($breakpoints, $trimmedValue);
	} @else {
		$value: to-number($trimmedValue);
	}

	$interval: map.get($unit-intervals, math.unit($value));

	@if not $interval {
		// It is not possible to include a mixin inside a function, so we have to
		// rely on the `im-log(..)` function rather than the `log(..)` mixin. Because
		// functions cannot be called anywhere in Sass, we need to hack the call in
		// a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
		// Sass 3.3, change this line in `@if im-log(..) {}` instead.
		$_: im-log("Unknown unit `#{math.unit($value)}`.");
	}

	@if $operator == ">" {
		$value: $value + $interval;
	} @else if $operator == "<" {
		$value: $value - $interval;
	}

	@return $value;
}

///
/// Parse an expression to return a valid media-query expression
///
/// @param {String} $expression - Expression to parse
///
/// @return {String} - Valid media query
///
@function parse-expression($expression) {
	// If it is part of $media-expressions, it has no operator
	// then there is no need to go any further, just return the value
	@if map.has-key($media-expressions, $expression) {
		@return map.get($media-expressions, $expression);
	}

	$operator: get-expression-operator($expression);
	$dimension: get-expression-dimension($expression, $operator);
	$prefix: get-expression-prefix($operator);
	$value: get-expression-value($expression, $operator);

	@return "(#{$prefix}-#{$dimension}: #{$value})";
}

/// Slice `$list` between `$start` and `$end` indexes
///
/// @access private
///
/// @param {List} $list - List to slice
/// @param {Number} $start [1] - Start index
/// @param {Number} $end [length($list)] - End index
///
/// @return {List} Sliced list
///
@function slice($list, $start: 1, $end: list.length($list)) {
	@if list.length($list) < 1 or $start > $end {
		@return ();
	}

	$result: ();

	@for $i from $start through $end {
		$result: list.append($result, list.nth($list, $i), comma);
	}

	@return $result;
}

/// String to number converter
/// @author Kitty Giraudel
/// @access private
////

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///

@function to-number($value) {
	@if meta.type-of($value) == "number" {
		@return $value;
	} @else if meta.type-of($value) != "string" {
		$_: im-log("Value for `to-number` should be a number or a string.");
	}

	$first-character: string.slice($value, 1, 1);
	$result: 0;
	$digits: 0;
	$minus: ($first-character == "-");
	$numbers: (
		"0": 0,
		"1": 1,
		"2": 2,
		"3": 3,
		"4": 4,
		"5": 5,
		"6": 6,
		"7": 7,
		"8": 8,
		"9": 9,
	);

	// Remove +/- sign if present at first character
	@if $first-character == "+" or $first-character == "-" {
		$value: string.slice($value, 2);
	}

	@for $i from 1 through string.length($value) {
		$character: string.slice($value, $i, $i);

		@if not(list.index(map.keys($numbers), $character) or $character == ".") {
			@return to-length(if($minus, -$result, $result), string.slice($value, $i));
		}

		@if $character == "." {
			$digits: 1;
		} @else if $digits == 0 {
			$result: $result * 10 + map.get($numbers, $character);
		} @else {
			$digits: $digits * 10;
			$result: $result + math.div(map.get($numbers, $character), $digits);
		}
	}

	@return if($minus, -$result, $result);
}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
	$units: (
		"px": 1px,
		"cm": 1cm,
		"mm": 1mm,
		"%": 1%,
		"ch": 1ch,
		"pc": 1pc,
		"in": 1in,
		"em": 1em,
		"rem": 1rem,
		"pt": 1pt,
		"ex": 1ex,
		"vw": 1vw,
		"vh": 1vh,
		"vmin": 1vmin,
		"vmax": 1vmax,
	);

	@if not list.index(map.keys($units), $unit) {
		$_: im-log("Invalid unit `#{$unit}`.");
	}

	@return $value * map.get($units, $unit);
}

////
/// String to number converter
/// @author Jack McNicol
/// @access private
////

///
/// Trims a string of leading and trailing spaces
///
/// @param {String} $string - Value to be trimmed
///
/// @return {String}
///

@function str-trim($string) {
	@if str-slice($string, 1, 1) == " " {
		@return str-trim(str-slice($string, 2));
	} @else if str-slice($string, str-length($string), -1) == " " {
		@return str-trim(str-slice($string, 1, -2));
	} @else {
		@return $string;
	}
}


